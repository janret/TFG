#!/usr/bin/env python3

import argparse
import pandas as pd
from pathlib import Path


def process_volumes(participants_file: str, volumes_file: str, output_dir: str):
    """
    Process and merge participants data with volume data from U-Net predictions.
    
    Args:
        participants_file (str): Path to the participants TSV file
        volumes_file (str): Path to the volumes TSV file
        output_dir (str): Directory to save output files
    """
    # Create output directory if it doesn't exist
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    # Load data
    participants = pd.read_csv(participants_file, sep='\t')
    volumes = pd.read_csv(volumes_file, sep='\t')
    
    # Merge data
    merged_df = pd.merge(
        participants,
        volumes,
        on='Label',
        how='left'
    )
    
    # Calculate TIV
    merged_df['TIV'] = merged_df[['gray_matter_mm3', 'white_matter_mm3', 'csf_mm3']].sum(axis=1)
    
    # Save complete dataset
    merged_df.to_csv(output_path / 'participants.tsv', sep='\t', index=False)
    
    # Create and save baseline dataset
    filtered_df = merged_df[merged_df['Label'].str.endswith('_ses-01_run-1')]
    filtered_df.to_csv(output_path / 'participants_baseline.tsv', sep='\t', index=False)
    
    return merged_df, filtered_df


def main():
    parser = argparse.ArgumentParser(
        description='Merge participants data with U-Net volume measurements.',
        formatter_class=argparse.RawTextHelpFormatter
    )
    
    # Required flags
    parser.add_argument('-p', '--participants',
                      required=True,
                      help='Path to the participants TSV file')
    
    parser.add_argument('-v', '--volumes',
                      required=True,
                      help='Path to the volumes TSV file generated by U-Net')
    
    parser.add_argument('-o', '--output',
                      required=True,
                      help='Directory to save output files')
    
    args = parser.parse_args()
    
    try:
        merged_df, filtered_df = process_volumes(
            args.participants,
            args.volumes,
            args.output
        )
        
        print(f"\nProcessing complete! Files saved in: {args.output}")
        print("\nMerged dataset preview:")
        print(merged_df.head(3))
        print("\nFiltered (baseline) dataset preview:")
        print(filtered_df.head(3))
        
    except Exception as e:
        print(f"Error processing files: {str(e)}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main()) 